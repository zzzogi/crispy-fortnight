generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  RETAIL
  GIFT
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]   // Added relation to orders
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  available   Boolean     @default(true)
  description String?
  imageUrl    String[]
  createdAt   DateTime    @default(now())
  label       String
  type        Type
  OrderItem   OrderItem[]
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  label    String
  products Product[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  buyerName    String
  buyerEmail   String
  buyerPhone   String
  buyerAddress String
  items        OrderItem[]
  totalItems   Int
  totalPrice   Float
  status       String      @default("pending") // optional: pending, paid, shipped, etc.
  createdAt    DateTime    @default(now())
  
  // New fields for User relation
  userId       String? @db.ObjectId     
  user         User?       @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  quantity Int
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String? @db.ObjectId
}

model Banner {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String?
  caption String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}