generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  RETAIL
  GIFT
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]   // Added relation to orders
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  available   Boolean     @default(true)
  description String?
  imageUrl    String[]
  createdAt   DateTime    @default(now())
  label       String
  type        Type
  OrderItem   OrderItem[]
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  label    String
  products Product[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  buyerName    String
  buyerEmail   String
  buyerPhone   String
  buyerAddress String
  items        OrderItem[]
  totalItems   Int
  totalPrice   Float
  status       String      @default("pending") // optional: pending, paid, shipped, etc.
  createdAt    DateTime    @default(now())
  
  // New fields for User relation
  userId       String? @db.ObjectId     
  user         User?       @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  quantity Int
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String? @db.ObjectId
}

model Banner {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String?
  caption String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}